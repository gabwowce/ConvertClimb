pluginManagement {
  repositories {
    gradlePluginPortal()
    mavenCentral()
    google()
  }

  // --- Resolve RN gradle plugin per Node (jei pavyks)
  def resolveWithNode = { String js ->
    try {
      return providers.exec {
        workingDir(rootDir)
        commandLine("node", "--print", js)
      }.standardOutput.asText.get().trim()
    } catch (Exception ignored) {
      return null
    }
  }

  // Kur yra @react-native/gradle-plugin (RN 0.75+)
  def rnGradlePluginPkg = resolveWithNode("require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })")
  // Kur yra expo-modules-autolinking pluginas
  def expoAutoLinkPkg = resolveWithNode("require.resolve('expo-modules-autolinking/package.json', { paths: [require.resolve('expo/package.json')] })")

  // Jei Node nepavyko â€“ naudokim fallback kelius (tinka RN 0.75+)
  def rnGradlePluginDir = rnGradlePluginPkg != null
    ? new File(rnGradlePluginPkg).getParentFile()
    : file("../node_modules/react-native/packages/react-native-gradle-plugin")

  def expoPluginsDir = expoAutoLinkPkg != null
    ? new File(new File(expoAutoLinkPkg).getParentFile(), "../android/expo-gradle-plugin")
    : file("../node_modules/expo-modules-autolinking/android/expo-gradle-plugin")

  includeBuild(rnGradlePluginDir.absolutePath)
  includeBuild(expoPluginsDir.absolutePath)
}

plugins {
  id("com.facebook.react.settings")
  id("expo-autolinking-settings")
}

extensions.configure(com.facebook.react.ReactSettingsExtension) { ex ->
  if (System.getenv('EXPO_USE_COMMUNITY_AUTOLINKING') == '1') {
    ex.autolinkLibrariesFromCommand()
  } else {
    ex.autolinkLibrariesFromCommand(expoAutolinking.rnConfigCommand)
  }
}

expoAutolinking.useExpoModules()
expoAutolinking.useExpoVersionCatalog()

rootProject.name = "Gradiator"

include(":app")
