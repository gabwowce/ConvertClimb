pluginManagement {
  // įtraukiam RN ir Expo gradle pluginus iš node_modules
  def rnGradlePlugin = new File(
    providers.exec {
      workingDir(rootDir)
      commandLine(
        "node",
        "--print",
        "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"
      )
    }.standardOutput.asText.get().trim()
  ).getParentFile().absolutePath
  includeBuild(rnGradlePlugin)

  def expoPluginsPath = new File(
    providers.exec {
      workingDir(rootDir)
      commandLine(
        "node",
        "--print",
        "require.resolve('expo-modules-autolinking/package.json', { paths: [require.resolve('expo/package.json')] })"
      )
    }.standardOutput.asText.get().trim(),
    "../android/expo-gradle-plugin"
  ).absolutePath
  includeBuild(expoPluginsPath)
}

plugins {
  // Naujoji RN konfigūracija
  id("com.facebook.react.settings")
  // Expo autolinking
  id("expo-autolinking-settings")
}

extensions.configure(com.facebook.react.ReactSettingsExtension) { ex ->
  // Leisk Expo sugeneruoti rnconfig, jei nenaudojamas bendruomenės autolinkingas
  if (System.getenv('EXPO_USE_COMMUNITY_AUTOLINKING') == '1') {
    ex.autolinkLibrariesFromCommand()
  } else {
    ex.autolinkLibrariesFromCommand(expoAutolinking.rnConfigCommand)
  }
}

// Expo moduliai
expoAutolinking.useExpoModules()
expoAutolinking.useExpoVersionCatalog()

rootProject.name = "Gradiator"
include(":app")

// ---- Fallback: įjungiam seną RN CLI autolinking'ą ----
// Kai kurie paketai (pvz. async-storage, masked-view, slider, lottie, safe-area-context)
// EAS’e kartais nebūna įtraukti, todėl priverstinai įtraukiame legacy autolinking.
apply from: file("../node_modules/@react-native-community/cli-platform-android/native_modules.gradle")
applyNativeModulesSettingsGradle(settings)
// ------------------------------------------------------
